# 行为树导航器配置
bt_navigator:
  ros__parameters:
    global_frame: map  # 全局参考坐标系
    robot_base_frame: base_link  # 机器人基坐标系
    # odom_topic: /odom  # 里程计话题（已注释，使用默认值）
    bt_loop_duration: 10  # 行为树循环周期（毫秒）
    default_server_timeout: 20  # 默认动作服务器超时时间（毫秒）
    wait_for_service_timeout: 1000  # 服务等待超时时间（毫秒）
    action_server_result_timeout: 900.0  # 动作服务器结果超时时间（秒）
    navigators: ["navigate_to_pose", "navigate_through_poses"]  # 导航器插件列表
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"  # 单目标点导航插件
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"  # 多目标点导航插件
    # 默认行为树 XML 文件用于导航，除非被重写
    # plugin_lib_names: []  # 自定义行为树插件列表（默认空）
    error_code_names:
      - compute_path_error_code  # 路径计算错误码
      - follow_path_error_code  # 路径跟随错误码

# 控制器服务器配置
controller_server:
  ros__parameters:
    controller_frequency: 20.0  # 控制器更新频率（Hz）
    min_x_velocity_threshold: 0.001  # 最小 x 方向速度阈值（m/s）
    min_y_velocity_threshold: 0.5  # 最小 y 方向速度阈值（m/s）
    min_theta_velocity_threshold: 0.001  # 最小角速度阈值（rad/s）
    failure_tolerance: 0.3  # 控制器失败容忍度
    progress_checker_plugins: ["progress_checker"]  # 进度检查插件
    goal_checker_plugins: ["general_goal_checker"]  # 目标检查插件
    controller_plugins: ["FollowPath"]  # 路径跟随控制器插件
    use_realtime_priority: false  # 是否使用实时优先级
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # 简单进度检查插件
      required_movement_radius: 0.5  # 移动进度所需半径（m）
      movement_time_allowance: 10.0  # 移动时间容许量（秒）
    general_goal_checker:
      stateful: True  # 启用有状态目标检查
      plugin: "nav2_controller::SimpleGoalChecker"  # 简单目标检查插件
      xy_goal_tolerance: 0.25  # XY 目标容差（m）
      yaw_goal_tolerance: 0.25  # 偏航目标容差（rad）
    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"  # MPPI 控制器插件
      time_steps: 56  # 轨迹规划时间步数
      model_dt: 0.05  # 模型预测时间步长（秒）
      batch_size: 2000  # 采样轨迹数量
      ax_max: 3.0  # 最大 x 方向加速度（m/s^2）
      ax_min: -3.0  # 最小 x 方向加速度（m/s^2）
      ay_max: 3.0  # 最大 y 方向加速度（m/s^2）
      az_max: 3.5  # 最大 z 方向加速度（m/s^2）
      vx_std: 0.2  # x 方向速度标准差
      vy_std: 0.2  # y 方向速度标准差
      wz_std: 0.4  # 角速度标准差
      vx_max: 0.5  # 最大 x 方向速度（m/s）
      vx_min: -0.35  # 最小 x 方向速度（m/s）
      vy_max: 0.5  # 最大 y 方向速度（m/s）
      wz_max: 1.9  # 最大角速度（rad/s）
      iteration_count: 1  # 迭代次数
      prune_distance: 1.7  # 轨迹修剪距离（m）
      transform_tolerance: 0.1  # 坐标变换容差（秒）
      temperature: 0.3  # 采样温度
      gamma: 0.015  # 折扣因子
      motion_model: "DiffDrive"  # 运动模型（差速驱动）
      visualize: true  # 是否可视化轨迹
      regenerate_noises: true  # 是否重新生成噪声
      TrajectoryVisualizer:
        trajectory_step: 5  # 轨迹可视化步长
        time_step: 3  # 时间步长
      AckermannConstraints:
        min_turning_r: 0.2  # 最小转弯半径（m）
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"]  # 评估函数列表
      ConstraintCritic:
        enabled: true  # 启用约束评估
        cost_power: 1  # 约束成本幂
        cost_weight: 4.0  # 约束成本权重
      GoalCritic:
        enabled: true  # 启用目标评估
        cost_power: 1  # 目标成本幂
        cost_weight: 5.0  # 目标成本权重
        threshold_to_consider: 1.4  # 考虑目标的阈值（m）
      GoalAngleCritic:
        enabled: true  # 启用目标角度评估
        cost_power: 1  # 角度成本幂
        cost_weight: 3.0  # 角度成本权重
        threshold_to_consider: 0.3  # 考虑角度的阈值（rad）
      PreferForwardCritic:
        enabled: true  # 启用前向优先评估
        cost_power: 1  # 前向成本幂
        cost_weight: 5.0  # 前向成本权重
        threshold_to_consider: 0.5  # 考虑前向的阈值
      CostCritic:
        enabled: true  # 启用成本评估
        cost_power: 1  # 成本幂
        cost_weight: 3.81  # 成本权重
        critical_cost: 300.0  # 关键成本阈值
        consider_footprint: true  # 是否考虑机器人足迹
        collision_cost: 1000000.0  # 碰撞成本
        near_goal_distance: 1.0  # 接近目标的距离（m）
        trajectory_point_step: 2  # 轨迹点步长
      PathAlignCritic:
        enabled: true  # 启用路径对齐评估
        cost_power: 1  # 对齐成本幂
        cost_weight: 14.0  # 对齐成本权重
        max_path_occupancy_ratio: 0.05  # 最大路径占用比率
        trajectory_point_step: 4  # 轨迹点步长
        threshold_to_consider: 0.2  # 考虑对齐的阈值
        offset_from_furthest: 20  # 距离最远点的偏移
        use_path_orientations: false  # 是否使用路径方向
      PathFollowCritic:
        enabled: true  # 启用路径跟随评估
        cost_power: 1  # 跟随成本幂
        cost_weight: 5.0  # 跟随成本权重
        offset_from_furthest: 5  # 距离最远点的偏移
        threshold_to_consider: 1.4  # 考虑跟随的阈值
      PathAngleCritic:
        enabled: true  # 启用路径角度评估
        cost_power: 1  # 角度成本幂
        cost_weight: 2.0  # 角度成本权重
        offset_from_furthest: 4  # 距离最远点的偏移
        threshold_to_consider: 0.3  # 考虑角度的阈值
        max_angle_to_furthest: 1.0  # 最大角度（rad）
        mode: 0  # 角度评估模式

# 局部代价地图配置
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0  # 局部地图更新频率（Hz）
      publish_frequency: 10.0  # 局部地图发布频率（Hz）
      global_frame: base_link  # 全局坐标系
      robot_base_frame: base_link  # 机器人基坐标系
      rolling_window: false  # 启用滚动窗口
      width: 3  # 地图宽度（m）
      height: 3  # 地图高度（m）
      resolution: 0.05  # 地图分辨率（m）
      robot_radius: 0.22  # 机器人半径（m）
      plugins: ["voxel_layer", "inflation_layer"]  # 代价地图插件
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件
        cost_scaling_factor: 3.0  # 成本缩放因子
        inflation_radius: 0.3 # 膨胀半径（m）
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"  # 体视素层插件
        enabled: True  # 启用体视素层
        publish_voxel_map: false  # 发布体视素地图
        origin_z: 0.0  # Z 轴原点（m）
        z_resolution: 0.05  # Z 轴分辨率（m）
        z_voxels: 16  # Z 轴体视素数量
        max_obstacle_height: 2.0  # 最大障碍物高度（m）
        mark_threshold: 0  # 标记阈值
        observation_sources: scan  # 观测源
        scan:
          topic: /scan  # 激光雷达话题
          max_obstacle_height: 2.0  # 最大障碍物高度（m）
          clearing: True  # 清除障碍物
          marking: True  # 标记障碍物
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 3.0  # 最大射线追踪范围（m）
          raytrace_min_range: 0.0  # 最小射线追踪范围（m）
          obstacle_max_range: 2.5  # 最大障碍物范围（m）
          obstacle_min_range: 0.0  # 最小障碍物范围（m）
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: false  # 订阅瞬态局部地图
      always_send_full_costmap: false  # 始终发送完整代价地图

# 全局代价地图配置
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0  # 全局地图更新频率（Hz）
      publish_frequency: 1.0  # 全局地图发布频率（Hz）
      global_frame: map  # 全局坐标系
      robot_base_frame: base_link  # 机器人基坐标系
      use_static_map: true
      robot_radius: 0.22  # 机器人半径（m）
      resolution: 0.05  # 地图分辨率（m）
      track_unknown_space: true  # 跟踪未知空间
      plugins: ["static_layer","obstacle_layer", "inflation_layer"]  # 全局代价地图插件
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 障碍物层插件
        enabled: True  # 启用障碍物层
        observation_sources: scan  # 观测源
        scan:
          topic: /scan  # 激光雷达话题
          max_obstacle_height: 2.0  # 最大障碍物高度（m）
          clearing: True  # 清除障碍物
          marking: True  # 标记障碍物
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 10.0  # 最大射线追踪范围（m）
          raytrace_min_range: 0.0  # 最小射线追踪范围（m）
          obstacle_max_range: 2.5  # 最大障碍物范围（m）
          obstacle_min_range: 0.0  # 最小障碍物范围（m）
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: True  # 订阅瞬态局部地图
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件
        cost_scaling_factor: 2.0  # 成本缩放因子
        inflation_radius: 0.2 # 膨胀半径（m）
      always_send_full_costmap: True  # 始终发送完整代价地图

# 地图服务器配置（已注释，默认在启动文件中设置）
# map_server:
#   ros__parameters:
#     yaml_filename: ""  # 地图文件路径

# 地图保存配置
map_saver:
  ros__parameters:
    save_map_timeout: 5.0  # 保存地图超时时间（秒）
    free_thresh_default: 0.25  # 默认自由空间阈值
    occupied_thresh_default: 0.65  # 默认占用空间阈值
    map_subscribe_transient_local: false  # 订阅瞬态局部地图

# 规划器服务器配置
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0  # 预期规划器频率（Hz）
    planner_plugins: ["GridBased"]  # 规划器插件
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"  # Navfn 规划器插件
      tolerance: 0.5  # 规划容差（m）
      use_astar: false  # 是否使用 A* 算法
      allow_unknown: true  # 允许未知区域

# 平滑器服务器配置
smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]  # 平滑器插件
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"  # 简单平滑器插件
      tolerance: 1.0e-10  # 平滑容差
      max_its: 1000  # 最大迭代次数
      do_refinement: True  # 是否进行路径细化

# 行为服务器配置
behavior_server:
  ros__parameters:
    local_costmap_topic: local_costmap/costmap_raw  # 局部代价地图话题
    global_costmap_topic: global_costmap/costmap_raw  # 全局代价地图话题
    local_footprint_topic: local_costmap/published_footprint  # 局部足迹话题
    global_footprint_topic: global_costmap/published_footprint  # 全局足迹话题
    cycle_frequency: 10.0  # 行为循环频率（Hz）
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # 行为插件
    spin:
      plugin: "nav2_behaviors/Spin"  # 自旋行为插件
    backup:
      plugin: "nav2_behaviors/BackUp"  # 后退行为插件
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"  # 按方向行驶行为插件
    wait:
      plugin: "nav2_behaviors/Wait"  # 等待行为插件
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"  # 辅助遥控行为插件
    local_frame: base_link  # 局部坐标系
    global_frame: map  # 全局坐标系
    robot_base_frame: base_link  # 机器人基坐标系
    transform_tolerance: 0.1  # 坐标变换容差（秒）
    simulate_ahead_time: 2.0  # 前向模拟时间（秒）
    max_rotational_vel: 1.0  # 最大旋转速度（rad/s）
    min_rotational_vel: 0.4  # 最小旋转速度（rad/s）
    rotational_acc_lim: 3.2  # 旋转加速度限制（rad/s^2）

# 路径点跟随器配置
waypoint_follower:
  ros__parameters:
    loop_rate: 20  # 循环频率（Hz）
    stop_on_failure: false  # 失败时是否停止
    action_server_result_timeout: 900.0  # 动作服务器结果超时时间（秒）
    waypoint_task_executor_plugin: "wait_at_waypoint"  # 路径点任务执行插件
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"  # 路径点等待插件
      enabled: True  # 启用路径点等待
      waypoint_pause_duration: 200  # 路径点暂停时间（毫秒）

# 速度平滑器配置
velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0  # 平滑频率（Hz）
    scale_velocities: False  # 是否缩放速度
    feedback: "OPEN_LOOP"  # 反馈模式（开环）
    max_velocity: [0.15, 0.0, 0.5]  # 最大速度 [x, y, theta]（m/s, m/s, rad/s）
    min_velocity: [-0.15, 0.0, -0.5]  # 最小速度 [x, y, theta]（m/s, m/s, rad/s）
    max_accel: [2.5, 0.0, 3.2]  # 最大加速度 [x, y, theta]（m/s^2, m/s^2, rad/s^2）
    max_decel: [-2.5, 0.0, -3.2]  # 最大减速度 [x, y, theta]（m/s^2, m/s^2, rad/s^2）
    # odom_topic: "odom"  # 里程计话题（已注释）
    odom_duration: 0.1  # 里程计持续时间（秒）
    deadband_velocity: [0.0, 0.0, 0.0]  # 速度死区 [x, y, theta]
    velocity_timeout: 1.0  # 速度超时时间（秒）

# 碰撞监测器配置
collision_monitor:
  ros__parameters:
    base_frame_id: "base_link"  # 基础坐标系
    odom_frame_id: "base_link"  # 里程计坐标系
    cmd_vel_in_topic: "cmd_vel_smoothed"  # 输入速度话题
    cmd_vel_out_topic: "cmd_vel"  # 输出速度话题
    state_topic: "collision_monitor_state"  # 状态话题
    transform_tolerance: 0.2  # 坐标变换容差（秒）
    source_timeout: 1.0  # 数据源超时时间（秒）
    base_shift_correction: True  # 基础偏移校正
    stop_pub_timeout: 2.0  # 停止发布超时时间（秒）
    polygons: ["FootprintApproach"]  # 多边形区域配置
    FootprintApproach:
      type: "polygon"  # 多边形类型
      action_type: "approach"  # 动作类型（接近）
      footprint_topic: "/local_costmap/published_footprint"  # 足迹话题
      time_before_collision: 1.2  # 碰撞前时间（秒）
      simulation_time_step: 0.1  # 模拟时间步长（秒）
      min_points: 6  # 最小点数
      visualize: False  # 是否可视化
      enabled: True  # 启用多边形
    observation_sources: ["scan"]  # 观测源
    scan:
      type: "scan"  # 观测类型（激光雷达）
      topic: "scan"  # 激光雷达话题
      min_height: 0.15  # 最小高度（m）
      max_height: 2.0  # 最大高度（m）
      enabled: True  # 启用激光雷达观测
